function [glmStructure, PETHswitch, PETHpavlovian, neurons] = runGLMpavlovian(ephysData)
%
% Run a generalized linear model on trial by trial ephys firing rate by behavioral events and deeplabcut velocity. 
%
% Input: 
%       ephysData:          structure with ephys data and dlc data for each session
%
% Output: 
%       glmStructure:       structure with p-values and slopes generated by GLME for each neuron



    % Set GLM parameters.
    intervalBuffer = 4;     % Amount to add before and after trial (seconds), for peSpike.
    trialStart = 0;
    trialEndSwitch = 18;    % Use for the actual GLME to look at ramp only within trial.
    trialEndPavlov = 7;
    binSize = 0.2;          % seconds
    binWidth = 1.0;     % For smoothing for plotting.

    % Compile neurons from all sessions with DLC data into one structure.
    neurons = [];
    nSessions = length(ephysData);
    for iSession = 1 : nSessions
        if contains(ephysData(iSession).group, 'DMS')  % If the recording is from the DMS, extract only the MSNs.
            currentNeurons = ephysData(iSession).neurons;
            averageFiringRate = [currentNeurons.averageFiringRate];
            neurons = [neurons, currentNeurons(strcmp({currentNeurons.type},'MSN'))];
        elseif contains(ephysData(iSession).group, 'PFC')
            currentNeurons = ephysData(iSession).neurons;
            for jNeuron = 1 : length(currentNeurons)
                currentNeurons(jNeuron).type = 'NaN';
            end
            neurons = [neurons, currentNeurons];
        end
    end
   
    % Run the GLM.
    glmStructure = [];
    PETHswitch = [];
    PETHpavlovian = [];
    for iNeuron = 1 : length(neurons)
        
        sessionName = extractBefore(neurons(iNeuron).filename, '_pavlovian');
        sessionRow = contains({ephysData.pl2FilePathway}, sessionName);
        glmStructure(iNeuron).session = sessionName;
        glmStructure(iNeuron).neuron = neurons(iNeuron).name;
        glmStructure(iNeuron).region = ephysData(sessionRow).group(1:3);

        if contains(ephysData(sessionRow).group, 'switch')
            glmStructure(iNeuron).task = 'switch';
            intervalBins = trialStart - intervalBuffer : binSize : trialEndSwitch + intervalBuffer;
            trialBins = trialStart : binSize : trialEndSwitch;
            timep = (trialStart + binSize : binSize : trialEndSwitch)';
            responseTimestamps = [neurons(iNeuron).trialSpecificEvents.shortResponse; neurons(iNeuron).trialSpecificEvents.longResponse];
            trialStartTimestamps = neurons(iNeuron).trialSpecificEvents.correctLongTrialCuesOn;
        else
            glmStructure(iNeuron).task = 'pavlovian';
            intervalBins = trialStart - intervalBuffer : binSize : trialEndPavlov + intervalBuffer;
            trialBins = trialStart : binSize : trialEndPavlov;
            timep = (trialStart + binSize : binSize : trialEndPavlov)';
            responseTimestamps = [neurons(iNeuron).trialSpecificEvents.rewardResponse];
            trialStartTimestamps = [neurons(iNeuron).trialSpecificEvents.rewardedTrialCuesOn];
        end
  

        % Nosepoke/reward port entry responses        
        periEventResponse = peSpike(responseTimestamps, trialStartTimestamps, intervalBins);
        responseTrial = double(periEventResponse);
        histogramResponseTrial = histc(responseTrial', trialBins);
        histogramResponseTrial = reshape(histogramResponseTrial(1:end-1,:), [], 1);

        % Trial start cues
        trialStartBinary = zeros(length(timep), size(trialStartTimestamps, 1));
        trialStartBinary(1, :) = 1;
        trialStartBinary = reshape(trialStartBinary(1:end,:), [], 1);

        % Firing Rate
        clear *periEventSpike*
        periEventSpike = peSpike(neurons(iNeuron).spikeTimestamps, trialStartTimestamps, intervalBins);
        spikeTrial = double(periEventSpike);
        histogramSpikeTrial = histc(spikeTrial', trialBins);
        histogramSpikeTrial = reshape(histogramSpikeTrial(1:end-1, :), [], 1);
        if contains(ephysData(sessionRow).group, 'switch')
            PETHswitch = [PETHswitch; gksmooth(periEventSpike, intervalBins, binWidth)];  % Smooth for PCA
        else
            PETHpavlovian = [PETHpavlovian; gksmooth(periEventSpike, intervalBins, binWidth)];
        end

        % GLME with time and velocity as independent variables, firing rate as dependent variable.
        trialTime = repmat(timep, size(spikeTrial, 1), 1);
        T = table(trialTime, histogramSpikeTrial, histogramResponseTrial, trialStartBinary,...
            'VariableNames', {'Time', 'FiringRate', 'Response', 'Cues'});
        lmNeuron = fitglme(T, 'FiringRate ~ Time + Response + Cues');
        lmNeuronAnova = anova(lmNeuron);
        glmStructure(iNeuron).pTime = [lmNeuronAnova{2,5}];
        glmStructure(iNeuron).pResponse = [lmNeuronAnova{3,5}];
        glmStructure(iNeuron).pCues = [lmNeuronAnova{4,5}];
        glmStructure(iNeuron).LMtime = lmNeuron;
        a = fixedEffects(lmNeuron); 
        glmStructure(iNeuron).timeSlope = a(2);
    end

    % Adjust p-values due to false discovery rate.
    fdrInput = [[glmStructure.pTime], [glmStructure.pResponse], [glmStructure.pCues]];
    [~, ~, ~, adjustedP] = fdr_bh(fdrInput);
    nIndependentVar = size(fdrInput,2) / length(glmStructure);
    pValuesFDR = reshape(adjustedP, [], nIndependentVar);
    for iNeuron = 1 : length(glmStructure)
        glmStructure(iNeuron).pTimeFDR = pValuesFDR(iNeuron, 1);
        glmStructure(iNeuron).pResponseFDR = pValuesFDR(iNeuron, 2);
        glmStructure(iNeuron).pCuesFDR = pValuesFDR(iNeuron, 3);
    end