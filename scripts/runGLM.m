function [glmStructure, PETH, neurons] = runGLM(ephysData)
%
% Run a generalized linear model on trial by trial ephys firing rate by behavioral events and deeplabcut velocity. 
%
% Input: 
%       ephysData:          structure with ephys data and dlc data for each session
%
% Output: 
%       glmStructure:       structure with p-values and slopes generated by GLME for each neuron



    % Set GLM parameters.
    intervalStart = -4;
    intervalEnd = 22;   % Use for peSpike.
    trialStart = 0;
    trialEnd = 18;      % Use for the actual GLME to look at ramp only within trial.
    binSize = 0.15;     % seconds
    intervalBins = intervalStart : binSize : intervalEnd;
    trialBins = trialStart : binSize : trialEnd;
    timep = (trialStart + binSize : binSize : trialEnd)';
    binWidth = 1.0;     % For smoothing for plotting.

    % Compile neurons from all sessions into one structure.
    neurons = [];
    nSessions = length(ephysData);
    for iSession = 4 : nSessions
        if all(ephysData(iSession).group == 'DMS')  % If the recording is from the DMS, extract only the MSNs.
            currentNeurons = ephysData(iSession).neurons;
            averageFiringRate = [currentNeurons.averageFiringRate];
            neurons = [neurons, currentNeurons(averageFiringRate > 0.5 & averageFiringRate < 20 & strcmp({currentNeurons.type},'MSN'))];
        else
            neurons = [neurons, ephysData(iSession).neurons];
        end
    end
    fprintf('\nTotal number of neurons for analysis: %d\n', length(neurons));
   
    % Run the GLM.
    glmStructure = [];
    for iNeuron = 1 : length(neurons)

        % Velocity
        sessionName = extractBefore(neurons(iNeuron).filename, '_rough');
        sessionRow = find(contains({ephysData.pl2FilePathway}, sessionName));
        behaviorData = ephysData(sessionRow).mpcTrialData;  % Identify the long trials that are correct
        longTrials = find(cellfun(@(x) x == 18000, {behaviorData.programmedDuration}));
        correctTrials = find(cellfun(@(x) ~isempty(x), {behaviorData.reward_inTrial}));
        correctLongTrials = ismember(longTrials, correctTrials);
        velocityData = ephysData(sessionRow).dlc.velocity.LongTrials(correctLongTrials,:);
        velocityData = velocityData(:, 241 : 1319);

        % Bin average velocity 
        frameRate = ephysData(sessionRow).dlc.frameRate;
        framesPerBin = frameRate * binSize;       
        nBins = round(size(velocityData,2)/framesPerBin);
        binnedVelocity = NaN(nBins, size(velocityData,1));
        for iTrial = 1 : size(velocityData,1)
            binnedVelocity(1:nBins-1,iTrial) = arrayfun(@(x) mean(velocityData(iTrial, x:x+framesPerBin-1)), 1:framesPerBin:length(velocityData)-framesPerBin+1)';
        end
        binnedVelocity = reshape(binnedVelocity, [], 1);

        % Firing Rate
        clear *periEventSpike*
        periEventSpike = peSpike(neurons(iNeuron).spikeTimestamps, neurons(iNeuron).trialSpecificEvents.correctLongTrialCuesOn, intervalBins);
        PETH(iNeuron, :) = gksmooth(periEventSpike, intervalBins, binWidth);  % Smooth for PCA
        spikeTrial = double(periEventSpike);
        histogramSpikeTrial = histc(spikeTrial', trialBins);
        histogramSpikeTrial = reshape(histogramSpikeTrial(1 : end-1, :), [], 1);

        % GLME with time and velocity as independent variables, firing rate as dependent variable.
        trialTime = repmat(timep, size(spikeTrial, 1), 1);
        T = table(trialTime, histogramSpikeTrial, binnedVelocity, 'VariableNames', {'Time', 'FiringRate', 'Velocity'});
        lmNeuron = fitglme(T, 'FiringRate~Time + Velocity');
        lmNeuronAnova = anova(lmNeuron);
        glmStructure(iNeuron).pTime = [lmNeuronAnova{2,5}];
        glmStructure(iNeuron).pVelocity = [lmNeuronAnova{3,5}];
        glmStructure(iNeuron).LMtime = lmNeuron;
        a = fixedEffects(lmNeuron); 
        glmStructure(iNeuron).timeSlope = a(2);
        glmStructure(iNeuron).motorSlope = a(3);
    end
